const [categoriesState, setCategoriesState] = useState<any[]>([]);
  const [previousCategoriesState, setPreviousCategoriesState] = useState<any[]>(
    []
  );

  useEffect(() => {
    const fetchCategories = async () => {
      const boardId = parseInt(params.id, 10);
      const taskIdsAll = await fetchTaskOrderByProject(boardId);
      if (taskIdsAll) {
        let categories: any = [];
        taskIdsAll.forEach((taskIdItem: any) => {
          const taskIds = taskIdItem.taskIds.split(",").map(Number);
          const task = {
            category: taskIdItem.category,
            taskIds: taskIds,
          };
          categories.push(task);
        });
        setCategoriesState(categories);
        setPreviousCategoriesState(categories);
      } else {
        const uniqueStatuses = Array.from(
          new Set(tasks.map((task) => task.status))
        );
        let categories: any = [];
        uniqueStatuses.forEach((status: string) => {
          const categorizedTasks = tasks.filter(
            (task) => task.status === status
          );
          const taskIds = categorizedTasks.map((task) => task.task_id);
          let category = { category: status, taskIds: taskIds };
          categories.push(category);
        });
        setCategoriesState(categories);
        setPreviousCategoriesState(categories);
      }
    };

    fetchCategories();
  }, [params.id, tasks]); // Added params.id and tasks to dependency array

  const handleDragEnd = async (result: DropResult) => {
    const { destination, source, draggableId } = result;

    if (!destination) {
      return;
    }

    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      return;
    }

    const updatedCategories = [...categoriesState];

    const sourceCategory = updatedCategories[source.droppableId];
    const destinationCategory = updatedCategories[destination.droppableId];

    const moveTask = (start: number, end: number, taskIds: number[]) => {
      const taskIdsCopy = Array.from(taskIds);
      const [removed] = taskIdsCopy.splice(start, 1);
      taskIdsCopy.splice(end, 0, removed);
      return taskIdsCopy;
    };

    if (source.droppableId === destination.droppableId) {
      const newTaskIds = moveTask(
        source.index,
        destination.index,
        sourceCategory.taskIds
      );
      updatedCategories[source.droppableId] = {
        ...sourceCategory,
        taskIds: newTaskIds,
      };
      setCategoriesState(updatedCategories);

      await updateTaskOrder(
        parseInt(params.id, 10),
        sourceCategory.category,
        sourceCategory.taskIds,
        newTaskIds.toString()
      );
    } else {
      const newSourceTaskIds = moveTask(
        source.index,
        0,
        sourceCategory.taskIds
      );
      const newDestinationTaskIds = moveTask(
        destination.index,
        0,
        destinationCategory.taskIds
      );

      updatedCategories[source.droppableId] = {
        ...sourceCategory,
        taskIds: newSourceTaskIds,
      };
      updatedCategories[destination.droppableId] = {
        ...destinationCategory,
        taskIds: newDestinationTaskIds,
      };

      setCategoriesState(updatedCategories);

      await Promise.all([
        updateTaskOrder(
          parseInt(params.id, 10),
          sourceCategory.category,
          sourceCategory.taskIds,
          newSourceTaskIds.toString()
        ),
        updateTaskOrder(
          parseInt(params.id, 10),
          destinationCategory.category,
          destinationCategory.taskIds,
          newDestinationTaskIds.toString()
        ),
      ]);
    }
  };

  if (!categoriesState.length) {
    return <div>Loading...</div>; // Added loading state while categories are being fetched
  }

  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <main className="flex space-x-6">
        {categoriesState.map((categoryState: any, i: number) => {
          const filteredTasks = tasks.filter(
            (task: any) => task.status === categoryState.category
          );
          const sortedTasks = categoryState.taskIds.map((taskId: number) =>
            filteredTasks.find((task: any) => task.task_id === taskId)
          );
          return (
            <div className="bg-white border border-gray-200 dark:border-gray-600 rounded-lg shadow-sm p-4 w-72 dark:bg-gray-800 dark:text-white">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                {categoryState.category}
              </h3>
              <Droppable droppableId={`${i}`} key={i}>
                {(provided) => (
                  <div
                    className="space-y-4 flex-grow"
                    ref={provided.innerRef}
                    {...provided.droppableProps}
                  >
                    {tasks.map((task: any, i: number) => {
                      return (
                        <Draggable
                          draggableId={`${task.task_id}`}
                          index={i}
                        >
                          {(provided) => (
                            <div
                              className={
                                "bg-white border border-gray-200 dark:border-gray-600 shadow rounded-lg shadow-sm p-4 mb-4 dark:text-white dark:bg-gray-800 text-gray-900"
                              }
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                              ref={provided.innerRef}
                            >
                              <h3 className="text-lg font-semibold">
                                {task.title}
                              </h3>
                              <p className="text-sm text-gray-600 mb-2 dark:text-gray-300">
                                {task.description}
                              </p>
                              <div className="mb-2">
                                <span className="text-xs text-gray-500 dark:text-gray-400">
                                  Due Date: {formatDate(task.due_date)}
                                </span>
                              </div>
                              <div className="mb-2">
                                <span
                                  className={`${"inline-block px-2 py-1 text-xs font-semibold rounded text-white"} ${
                                    task.priority === "High"
                                      ? "bg-red-500"
                                      : task.priority === "Medium"
                                      ? "bg-yellow-500"
                                      : "bg-green-500"
                                  }`}
                                >
                                  {task.priority}
                                </span>
                              </div>
                              <div>
                                <span
                                  className={`${"inline-block px-2 py-1 text-xs font-semibold rounded text-white"} ${
                                    task.status === "To Do"
                                      ? "bg-blue-500"
                                      : task.status === "In Progress"
                                      ? "bg-yellow-500"
                                      : "bg-green-500"
                                  }`}
                                >
                                  {task.status}
                                </span>
                              </div>
                            </div>
                          )}
                        </Draggable>
                      );
                    })}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
              <Link
                href={`/boards/${parseInt(params.id, 10)}/add-task`}
                className="bg-blue-500 hover:bg-blue-600 dark:bg-blue-700 dark:hover:bg-blue-600 text-white font-semibold mt-2 py-2 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-300 inline-block"
                passHref
              >
                Add New Task
              </Link>
            </div>
          );
        })}
      </main>
    </DragDropContext>
  );